"use strict";(self.webpackChunk_blockchain_lab_um_ssi_snap_docs=self.webpackChunk_blockchain_lab_um_ssi_snap_docs||[]).push([[436],{9500:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(8427),r=(n(2784),n(876));const i={sidebar_position:2},o="JSON-RPC API",s={unversionedId:"tutorial/rpc-methods",id:"tutorial/rpc-methods",title:"JSON-RPC API",description:"All of the types mentioned below can be found in the library @blockchain-lab-um/ssi-snap-types.",source:"@site/docs/tutorial/rpc-methods.md",sourceDirName:"tutorial",slug:"/tutorial/rpc-methods",permalink:"/ssi-snap-docs/docs/tutorial/rpc-methods",draft:!1,editUrl:"https://github.com/blockchain-lab-um/ssi-snap-docs/edit/master/docs/tutorial/rpc-methods.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"How To Implement It?",permalink:"/ssi-snap-docs/docs/tutorial/implementation"},next:{title:"Libraries & Plugins",permalink:"/ssi-snap-docs/docs/category/libraries--plugins"}},l={},p=[{value:"VC Methods",id:"vc-methods",level:2},{value:"saveVC",id:"savevc",level:3},{value:"Description",id:"description",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"queryVCs",id:"queryvcs",level:3},{value:"Description",id:"description-1",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"deleteVC",id:"deletevc",level:3},{value:"Description",id:"description-2",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"createVP",id:"createvp",level:3},{value:"Description",id:"description-3",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"DID Methods",id:"did-methods",level:2},{value:"getDID",id:"getdid",level:3},{value:"Description",id:"description-4",level:4},{value:"getDIDMethod",id:"getdidmethod",level:3},{value:"Description",id:"description-5",level:4},{value:"switchDIDMethod",id:"switchdidmethod",level:3},{value:"Description",id:"description-6",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"getAvailableMethods",id:"getavailablemethods",level:3},{value:"Description",id:"description-7",level:4},{value:"VC Store Methods",id:"vc-store-methods",level:2},{value:"getVCStore",id:"getvcstore",level:3},{value:"Description",id:"description-8",level:4},{value:"setVCStore",id:"setvcstore",level:3},{value:"Description",id:"description-9",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-4",level:4},{value:"getAvailableVCStores",id:"getavailablevcstores",level:3},{value:"Description",id:"description-10",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Snap Methods",id:"snap-methods",level:2},{value:"togglePopups",id:"togglepopups",level:3},{value:"Description",id:"description-11",level:4},{value:"changeInfuraToken",id:"changeinfuratoken",level:3},{value:"Description",id:"description-12",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-6",level:4},{value:"getAccountSettings",id:"getaccountsettings",level:3},{value:"Description",id:"description-13",level:4},{value:"Returns",id:"returns-7",level:4},{value:"getSnapSettings",id:"getsnapsettings",level:3},{value:"Description",id:"description-14",level:4},{value:"Returns",id:"returns-8",level:4}],d={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"json-rpc-api"},"JSON-RPC API"),(0,r.kt)("p",null,"All of the types mentioned below can be found in the library ",(0,r.kt)("inlineCode",{parentName:"p"},"@blockchain-lab-um/ssi-snap-types"),"."),(0,r.kt)("h2",{id:"vc-methods"},"VC Methods"),(0,r.kt)("h3",{id:"savevc"},"saveVC"),(0,r.kt)("h4",{id:"description"},"Description"),(0,r.kt)("p",null,"Used to store a VC in SSI Snap. VC can be saved in one or more supported stores."),(0,r.kt)("h4",{id:"parameters"},"Parameters"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"verifiableCredential - VC, must be of type ",(0,r.kt)("inlineCode",{parentName:"li"},"W3CVerifiableCredential")," from @veramo/core"),(0,r.kt)("li",{parentName:"ol"},"options? - ",(0,r.kt)("inlineCode",{parentName:"li"},"SaveVCRequestParams"),(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"store? - string or array of strings. Defines where to store the VC")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const response = await ethereum.request({\n  method: `wallet_snap_${snapId}`,\n  params: {\n    method: 'saveVC',\n    params: {\n      verifiableCredential: vc,\n    },\n  },\n});\n")),(0,r.kt)("h4",{id:"returns"},"Returns"),(0,r.kt)("p",null,"Array of ",(0,r.kt)("inlineCode",{parentName:"p"},"SaveVCRequestResult")," objects"),(0,r.kt)("h3",{id:"queryvcs"},"queryVCs"),(0,r.kt)("h4",{id:"description-1"},"Description"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"queryVCs")," is used to get a list of VCs stored by the currently selected MetaMask account. Optional parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"params")," is an object with optional properties ",(0,r.kt)("inlineCode",{parentName:"p"},"filter")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"options"),"."),(0,r.kt)("p",null,"Filter defines what ",(0,r.kt)("inlineCode",{parentName:"p"},"queryVCs")," returns and Options defines where to search for data and what format to return it in."),(0,r.kt)("p",null,"QueryVCsRequestParams type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"type QueryVCsRequestParams = {\n  filter?: {\n    type: string;\n    filter: unknown;\n  };\n  options?: {\n    store?: AvailableVCStores | AvailableVCStores[];\n    returnStore?: boolean;\n  };\n};\n")),(0,r.kt)("p",null,"Currently, 3 different ",(0,r.kt)("inlineCode",{parentName:"p"},"filter")," types are supported; ",(0,r.kt)("inlineCode",{parentName:"p"},"none"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"JSONPath"),". Type ",(0,r.kt)("inlineCode",{parentName:"p"},"none")," will work as if no filter property was provided, ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," will search for matching ID of VC and ",(0,r.kt)("inlineCode",{parentName:"p"},"JSONPath")," will use jsonpath lib to find matching VCs."),(0,r.kt)("p",null,"In the case of ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),", filter.filter is a string of an id."),(0,r.kt)("p",null,"In the case of ",(0,r.kt)("inlineCode",{parentName:"p"},"JSONPath")," , filter.filter is a string containing JSONPath string. Note: query needs to start with @.data while filterin VC alone. Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const jsonPath =\n  '$[?(@.data.credentialSubject.achievement == \"Certified Solidity Developer 2\")]';\n")),(0,r.kt)("p",null,"Options defines where to search for VCs. One or more supported stores can be provided. If ",(0,r.kt)("inlineCode",{parentName:"p"},"returnStore")," is enabled, metadata of returned VCs will contain a string where they're stored"),(0,r.kt)("h4",{id:"parameters-1"},"Parameters"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"filter (optional) - ",(0,r.kt)("inlineCode",{parentName:"li"},"QueryVCsRequestParams")," object"),(0,r.kt)("li",{parentName:"ol"},"options (optional) - ",(0,r.kt)("inlineCode",{parentName:"li"},"QueryVCsOptions")," object")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const response = await ethereum.request({\n  method: `wallet_snap_${snapId}`,\n  params: {\n    method: 'queryVCs',\n    params: {\n      filter: {\n        type: 'id',\n        filter: '0x123456789',\n      },\n      options: {\n        store: 'snap',\n        returnStore: true,\n      },\n    },\n  },\n});\n")),(0,r.kt)("h4",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,"Array of ",(0,r.kt)("inlineCode",{parentName:"p"},"QueryVCsRequestResult")," objects."),(0,r.kt)("h3",{id:"deletevc"},"deleteVC"),(0,r.kt)("h4",{id:"description-2"},"Description"),(0,r.kt)("p",null,"Used to delete a VC from one or more stores, based on an ID obtained with ",(0,r.kt)("inlineCode",{parentName:"p"},"queryVCs")," method"),(0,r.kt)("h4",{id:"parameters-2"},"Parameters"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"id - id of a VC"),(0,r.kt)("li",{parentName:"ol"},"options (optional) - ",(0,r.kt)("inlineCode",{parentName:"li"},"DeleteVCsOptions")," object")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const response = await ethereum.request({\n  method: `wallet_snap_${snapId}`,\n  params: {\n    method: 'deleteVC',\n    params: {\n      id: '123',\n      options: {\n        store: 'snap',\n      },\n    },\n  },\n});\n")),(0,r.kt)("h4",{id:"returns-2"},"Returns"),(0,r.kt)("p",null,"An array of boolean (true, if VC deleted from store X, false if there was an error, or VC was not found)"),(0,r.kt)("h3",{id:"createvp"},"createVP"),(0,r.kt)("h4",{id:"description-3"},"Description"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"createVP")," is used to get a VP for one or more specific VCs. Params object is of type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export type CreateVPRequestParams = {\n  vcs: VCRequest[];\n  proofFormat?: 'jwt' | 'lds' | 'EthereumEip712Signature2021';\n  proofOptions?: {\n    type?: string;\n    domain?: string;\n    challenge?: string;\n  };\n};\n\nexport type VCRequest = {\n  id: string;\n  metadata?: {\n    store?: AvailableVCStores;\n  };\n};\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"vcs")," is a list of VCs to be included in a VP. Its an array of objects that need to contain ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," of a VC (Which can be obtained using the ",(0,r.kt)("inlineCode",{parentName:"p"},"queryVCs")," method). ",(0,r.kt)("inlineCode",{parentName:"p"},"metadata")," property is optional and it contains ",(0,r.kt)("inlineCode",{parentName:"p"},"store")," property which defines where to look for VC with id ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"proofFormat")," can be jwt, jsonld or EthereumEip712Signature2021."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"options")," is optional and is used to define ",(0,r.kt)("inlineCode",{parentName:"p"},"domain"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"challenge")," if needed."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"holder")," of the VP will be a DID generated based on currently selected MetaMask account AND currently selected DID Method."),(0,r.kt)("h4",{id:"parameters-3"},"Parameters"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"vcs - an array of ",(0,r.kt)("inlineCode",{parentName:"li"},"VCRequest")," objects."),(0,r.kt)("li",{parentName:"ol"},"proofFormat (optional) - proofFormat string, jwt by default"),(0,r.kt)("li",{parentName:"ol"},"proofOptions (optional) - ",(0,r.kt)("inlineCode",{parentName:"li"},"ProofOptions")," object")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const response = await ethereum.request({\n  method: `wallet_snap_${snapId}`,\n  params: {\n    vcs: [{ id: '123', metadata: { store: 'ceramic' } }, { id: '456' }],\n    proofFormat: 'jwt',\n    options: {\n      challenge: '123456789',\n    },\n  },\n});\n")),(0,r.kt)("h4",{id:"returns-3"},"Returns"),(0,r.kt)("p",null,"verifiable presentation"),(0,r.kt)("h2",{id:"did-methods"},"DID Methods"),(0,r.kt)("h3",{id:"getdid"},"getDID"),(0,r.kt)("h4",{id:"description-4"},"Description"),(0,r.kt)("p",null,"Generates and returns a DID based on currently selected MetaMask Account and DID Method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const response = await ethereum.request({\n  method: `wallet_snap_${snapId}`,\n  params: {\n    method: 'getDID',\n  },\n});\n")),(0,r.kt)("h3",{id:"getdidmethod"},"getDIDMethod"),(0,r.kt)("h4",{id:"description-5"},"Description"),(0,r.kt)("p",null,"Returns currently selected DID method"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const response = await ethereum.request({\n  method: `wallet_snap_${snapId}`,\n  params: {\n    method: 'getDIDMethod',\n  },\n});\n")),(0,r.kt)("h3",{id:"switchdidmethod"},"switchDIDMethod"),(0,r.kt)("h4",{id:"description-6"},"Description"),(0,r.kt)("p",null,"Switch the DID method"),(0,r.kt)("h4",{id:"parameters-4"},"Parameters"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},'didMethod - name of did method ("did:ethr" or "did:key"). Must be one of methods returned by ',(0,r.kt)("inlineCode",{parentName:"li"},"getAvailableMethods"),".")),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"DID:KEY support is experimental and still under development!")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const response = await ethereum.request({\n  method: `wallet_snap_${snapId}`,\n  params: {\n    method: 'switchDIDMethod',\n    params: {\n      didMethod: 'did:ethr',\n    },\n  },\n});\n")),(0,r.kt)("h3",{id:"getavailablemethods"},"getAvailableMethods"),(0,r.kt)("h4",{id:"description-7"},"Description"),(0,r.kt)("p",null,"Returns a list of supported DID methods"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const response = await ethereum.request({\n  method: `wallet_snap_${snapId}`,\n  params: {\n    method: 'getAvailableMethods',\n  },\n});\n")),(0,r.kt)("h2",{id:"vc-store-methods"},"VC Store Methods"),(0,r.kt)("h3",{id:"getvcstore"},"getVCStore"),(0,r.kt)("h4",{id:"description-8"},"Description"),(0,r.kt)("p",null,"Get selected VC Store plugin"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const response = await ethereum.request({\n  method: `wallet_snap_${snapId}`,\n  params: {\n    method: 'getVCStore',\n  },\n});\n")),(0,r.kt)("h4",{id:""}),(0,r.kt)("p",null,"Returns an Record of VCStores and whether or not they're enabled. By default both snap & ceramic are enabled"),(0,r.kt)("h3",{id:"setvcstore"},"setVCStore"),(0,r.kt)("h4",{id:"description-9"},"Description"),(0,r.kt)("p",null,"Change the selected VC Store plugin"),(0,r.kt)("h4",{id:"parameters-5"},"Parameters"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},'store - name of VC Store plugin ("snap" or "ceramic"). Must be one of methods returned by ',(0,r.kt)("inlineCode",{parentName:"li"},"getAvailableVCStores"),"."),(0,r.kt)("li",{parentName:"ol"},"value - boolean. Enable/disable specific store plugin")),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"Ceramic network support is experimental and still under development!")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const response = await ethereum.request({\n  method: `wallet_snap_${snapId}`,\n  params: {\n    method: 'setVCStore',\n    params: {\n      store: 'ceramic',\n      value: false,\n    },\n  },\n});\n")),(0,r.kt)("h4",{id:"returns-4"},"Returns"),(0,r.kt)("p",null,"boolean"),(0,r.kt)("h3",{id:"getavailablevcstores"},"getAvailableVCStores"),(0,r.kt)("h4",{id:"description-10"},"Description"),(0,r.kt)("p",null,"Get a list of supported VC Store plugins"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const response = await ethereum.request({\n  method: `wallet_snap_${snapId}`,\n  params: {\n    method: 'getAvailableVCStores',\n  },\n});\n")),(0,r.kt)("h4",{id:"returns-5"},"Returns"),(0,r.kt)("p",null,"Array of strings of available VCStores"),(0,r.kt)("h2",{id:"snap-methods"},"Snap Methods"),(0,r.kt)("h3",{id:"togglepopups"},"togglePopups"),(0,r.kt)("h4",{id:"description-11"},"Description"),(0,r.kt)("p",null,"Used to disable popups that show up whenever user tries to save a VC, generate a VP, etc."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const response = await ethereum.request({\n  method: `wallet_snap_${snapId}`,\n  params: {\n    method: 'togglePopups',\n  },\n});\n")),(0,r.kt)("h3",{id:"changeinfuratoken"},"changeInfuraToken"),(0,r.kt)("h4",{id:"description-12"},"Description"),(0,r.kt)("p",null,"change the Infura token used by SSI Snap"),(0,r.kt)("h4",{id:"parameters-6"},"Parameters"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"infuraToken - new infura token")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const response = await ethereum.request({\n  method: `wallet_snap_${snapId}`,\n  params: {\n    method: 'changeInfuraToken',\n    params: {\n      infuraToken: 'abcdefg',\n    },\n  },\n});\n")),(0,r.kt)("h4",{id:"returns-6"},"Returns"),(0,r.kt)("p",null,"boolean"),(0,r.kt)("h3",{id:"getaccountsettings"},"getAccountSettings"),(0,r.kt)("h4",{id:"description-13"},"Description"),(0,r.kt)("p",null,"Used to obtain settings of currently selected account"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const response = await ethereum.request({\n  method: `wallet_snap_${snapId}`,\n  params: {\n    method: 'getAccountSettings',\n  },\n});\n")),(0,r.kt)("h4",{id:"returns-7"},"Returns"),(0,r.kt)("p",null,"Object with type"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export type SSIAccountConfig = {\n  ssi: {\n    didMethod: AvailableMethods;\n    vcStore: Record<AvailableVCStores, boolean>;\n  };\n};\n")),(0,r.kt)("h3",{id:"getsnapsettings"},"getSnapSettings"),(0,r.kt)("h4",{id:"description-14"},"Description"),(0,r.kt)("p",null,"Used to obtain settings of the snap"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const response = await ethereum.request({\n  method: `wallet_snap_${snapId}`,\n  params: {\n    method: 'getSnapSettings',\n  },\n});\n")),(0,r.kt)("h4",{id:"returns-8"},"Returns"),(0,r.kt)("p",null,"Object with type"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export type SSISnapConfig = {\n  snap: {\n    infuraToken: string;\n    acceptedTerms: boolean;\n  };\n  dApp: {\n    disablePopups: boolean;\n    friendlyDapps: string[];\n  };\n};\n")))}u.isMDXComponent=!0},876:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(2784);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,h=u["".concat(l,".").concat(m)]||u[m]||c[m]||i;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);