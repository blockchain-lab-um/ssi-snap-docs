"use strict";(self.webpackChunk_blockchain_lab_um_ssi_snap_docs=self.webpackChunk_blockchain_lab_um_ssi_snap_docs||[]).push([[543],{4993:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(2983);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},g="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),g=l(n),m=r,d=g["".concat(p,".").concat(m)]||g[m]||u[m]||o;return n?a.createElement(d,s(s({ref:t},c),{},{components:n})):a.createElement(d,s({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[g]="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3547:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>g,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=n(7364),r=(n(2983),n(4993));const o={sidebar_position:4},s="DataManager (Veramo)",i={unversionedId:"libraries/data-manager",id:"libraries/data-manager",title:"DataManager (Veramo)",description:"Introduction",source:"@site/docs/libraries/data-manager.md",sourceDirName:"libraries",slug:"/libraries/data-manager",permalink:"/ssi-snap-docs/docs/libraries/data-manager",draft:!1,editUrl:"https://github.com/blockchain-lab-um/ssi-snap/edit/develop/packages/docs/docs/libraries/data-manager.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"SSI Snap Connector",permalink:"/ssi-snap-docs/docs/libraries/ssi-snap-connector"},next:{title:"Apps",permalink:"/ssi-snap-docs/docs/category/apps"}},p={},l=[{value:"Introduction",id:"introduction",level:3},{value:"How to use",id:"how-to-use",level:3},{value:"Veramo Agent Setup",id:"veramo-agent-setup",level:4},{value:"DataManager Types",id:"datamanager-types",level:4}],c={toc:l};function g(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"datamanager-veramo"},"DataManager (Veramo)"),(0,r.kt)("h3",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Veramo does not provide similar support for managing VCs like it does for DIDs and KeyPairs. ",(0,r.kt)("strong",{parentName:"p"},"Veramo Data Manager")," is a custom plugin for managing arbitrary data with the Veramo client. It works very similarly to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/uport-project/veramo/tree/next/packages/did-manager"},"DIDManager")," and other Manager plugins built for Veramo. Data stored using this plugin is managed by sub-plugins."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/69682837/201887288-e666d565-fc2c-4160-ac85-a98e790eeced.png",alt:"VCManager design"})),(0,r.kt)("p",null,"Learn more about ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/uport-project/veramo/issues/1058"},"DataManager"),"."),(0,r.kt)("p",null,"DataManager comes with an ",(0,r.kt)("inlineCode",{parentName:"p"},"AbstractDataStore"),", which is a template for plugins that actually manage the data! Bellow is the code of AbstractDataStore."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface ISaveArgs {\n  data: unknown;\n  options?: unknown;\n}\n\nexport interface IDeleteArgs {\n  id: string;\n}\n\nexport interface IFilterArgs {\n  filter?: {\n    type: string;\n    filter: unknown;\n  };\n}\n\nexport interface IQueryResult {\n  data: unknown;\n  metadata: {\n    id: string;\n  };\n}\n\nexport abstract class AbstractDataStore {\n  abstract save(args: ISaveArgs): Promise<string>;\n  abstract delete(args: IDeleteArgs): Promise<boolean>;\n  abstract query(args: IFilterArgs): Promise<Array<IQueryResult>>;\n  abstract clear(args: IFilterArgs): Promise<boolean>;\n}\n")),(0,r.kt)("p",null,"This abstract class enabled ",(0,r.kt)("a",{parentName:"p",href:"/ssi-snap-docs/docs/ssi-snap/architecture"},(0,r.kt)("inlineCode",{parentName:"a"},"SnapVCStore"))," plugin, which stores the array of VCs in MetaMask State and ",(0,r.kt)("inlineCode",{parentName:"p"},"CeramicVCStore")," which stores VCs on Ceramic Network."),(0,r.kt)("h3",{id:"how-to-use"},"How to use"),(0,r.kt)("h4",{id:"veramo-agent-setup"},"Veramo Agent Setup"),(0,r.kt)("p",null,"Add the plugin to the Veramo agent setup."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"  const vcStorePlugins: Record<string, AbstractVCStore> = {};\n  vcStorePlugins['snap'] = new SnapVCStore();\n  vcStorePlugins['ceramic'] = new CeramicVCStore();\n  vcStorePlugins['memory'] = new MemoryDataStore();\n  export const agent = createAgent<\n      ...\n      IDataManager &\n      ...\n  >({\n    plugins: [\n      ...\n      new DataManager({ store: vcStorePlugins }),\n      ...\n    ],\n  });\n")),(0,r.kt)("p",null,"Use the plugin"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"await agent.save({ data: vc, options: { store: 'ceramic' } });\n\nconst res = await agent.query({});\n\nconst delRes = await agent.delete({\n  id: '123',\n  options: { store: ['ceramic', 'snap'] },\n});\n")),(0,r.kt)("h4",{id:"datamanager-types"},"DataManager Types"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface IDataManager extends IPluginMethodMap {\n  query(args: IDataManagerQueryArgs): Promise<Array<IDataManagerQueryResult>>;\n\n  save(args: IDataManagerSaveArgs): Promise<Array<IDataManagerSaveResult>>;\n\n  delete(args: IDataManagerDeleteArgs): Promise<Array<boolean>>;\n\n  clear(args: IDataManagerClearArgs): Promise<Array<boolean>>;\n}\n\n/**\n *  Types\n */\nexport type Filter = {\n  type: string;\n  filter: unknown;\n};\n\ntype QueryOptions = {\n  store?: string | string[];\n  returnStore?: boolean;\n};\n\ntype DeleteOptions = {\n  store: string | string[];\n};\n\ntype SaveOptions = {\n  store: string | string[];\n};\n\ntype ClearOptions = {\n  store: string | string[];\n};\n\ntype QueryMetadata = {\n  id: string;\n  store?: string;\n};\n\n/**\n *  Interfaces for DataManager method arguments\n */\nexport interface IDataManagerQueryArgs {\n  filter?: Filter;\n  options?: QueryOptions;\n}\n\nexport interface IDataManagerDeleteArgs {\n  id: string;\n  options?: DeleteOptions;\n}\n\nexport interface IDataManagerSaveArgs {\n  data: unknown;\n  options: SaveOptions;\n}\n\nexport interface IDataManagerClearArgs {\n  filter?: Filter;\n  options?: ClearOptions;\n}\n\n/**\n * Interfaces for DataManager method return values\n */\nexport interface IDataManagerQueryResult {\n  data: unknown;\n  metadata: QueryMetadata;\n}\n\nexport interface IDataManagerSaveResult {\n  id: string;\n  store: string;\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"https://github.com/blockchain-lab-um/ssi-snap/tree/master/packages/vcmanager"},"GitHub")," |\n",(0,r.kt)("a",{parentName:"strong",href:"https://www.npmjs.com/package/@blockchain-lab-um/veramo-vc-manager"},"npm"))))}g.isMDXComponent=!0}}]);