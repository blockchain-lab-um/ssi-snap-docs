"use strict";(self.webpackChunk_blockchain_lab_um_ssi_snap_docs=self.webpackChunk_blockchain_lab_um_ssi_snap_docs||[]).push([[16],{8968:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=t(8427),r=(t(2784),t(876));const i={sidebar_position:1},o="SSI Snap Connector",s={unversionedId:"libraries/ssi-snap-connector",id:"libraries/ssi-snap-connector",title:"SSI Snap Connector",description:"SSI Snap connector is used to install SSI snap and expose API toward snap on dApps and other applications.",source:"@site/docs/libraries/ssi-snap-connector.md",sourceDirName:"libraries",slug:"/libraries/ssi-snap-connector",permalink:"/ssi-snap-docs/docs/libraries/ssi-snap-connector",draft:!1,editUrl:"https://github.com/blockchain-lab-um/ssi-snap-docs/edit/master/docs/libraries/ssi-snap-connector.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Libraries & Plugins",permalink:"/ssi-snap-docs/docs/category/libraries--plugins"},next:{title:"VCManager (Veramo)",permalink:"/ssi-snap-docs/docs/libraries/vc-manager"}},l={},p=[{value:"Usage",id:"usage",level:2},{value:"Install",id:"install",level:3},{value:"Connector methods:",id:"connector-methods",level:2},{value:"Utility methods",id:"utility-methods",level:4}],c={toc:p};function d(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"ssi-snap-connector"},"SSI Snap Connector"),(0,r.kt)("p",null,"SSI Snap connector is used to install SSI snap and expose API toward snap on dApps and other applications."),(0,r.kt)("p",null,"For more details on SSI Snap Connector itself see ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/blockchain-lab-um/ssi-snap-connector"},"ssi-snap-connector repo"),"."),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"Ceramic network and DID:KEY support are experimental and still under development!")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("h3",{id:"install"},"Install"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"yarn add @blockchain-lab-um/ssi-snap-connector")),(0,r.kt)("p",null,"Connector has exposed function for installing the Snap."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"export async function enableSSISnap(\n  {\n    snapId?: string;\n    version?: string;\n    supportedMethods?: Array<typeof availableMethods[number]>;\n  }): Promise<MetaMaskSSISnap>;\n")),(0,r.kt)("p",null,"When installing the SSI Snap it is possible to set a custom ",(0,r.kt)("inlineCode",{parentName:"p"},"snapId")," if you do not want to instal it from the official repository."),(0,r.kt)("p",null,"It is also possible to use custom version and set a list of supported methods. If connected SSI Snap does not currently have one of the supported methods selected, ",(0,r.kt)("inlineCode",{parentName:"p"},"switchMethod")," RPC method will be automatically called."),(0,r.kt)("p",null,"During the ",(0,r.kt)("inlineCode",{parentName:"p"},"enableSSISnap")," function ",(0,r.kt)("inlineCode",{parentName:"p"},"init")," RPC method is called. If user changes MetaMask Account, the same function will be called again (nothing will happen if user already accepted Terms & Conditions on new Account)."),(0,r.kt)("p",null,"After snap installation, this function returns ",(0,r.kt)("inlineCode",{parentName:"p"},"MetamaskSSISnap")," object that can be used to retrieve snap API.\nAn example of initializing SSI snap and invoking snap API is shown below."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// install snap and fetch API\nconst snap = await enableSSISnap({ version: 'latest' });\nconst api = await snap.getSSISnapApi();\n\n// invoke API\nconst vcs = await api.getVCs();\n\nconsole.log('list of VCs:', vcs);\n")),(0,r.kt)("h2",{id:"connector-methods"},"Connector methods:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"/**\n * Get a list of VCs stored in the SSI Snap under currently selected MetaMask account\n *\n * @param {VCQuerry} querry - Querry for filtering through all VCs\n * @return {Promise<Array<VerifiableCredential>>} list of VCs\n */\nconst vcs = await api.getVCs({ issuer: 'did:0x04:0x123...' });\n\n/**\n * Get a VP from a VC\n *\n * @param {string} vc_id - ID of VC used for generating a VP. Can be obtained with getVCs function\n * optional @param {string} challenge\n * optional @param {string} domain\n */\nconst vp = await api.getVP(vc_id);\n\n/**\n * Save a VC in the SSI Snap under currently selected MetaMask account\n *\n * @param {VerifiableCredential} verifiableCredential - vc\n *\n */\nconst res = await api.saveVC(verifiableCredential);\n\n/**\n * Initialize MetaMask snap for an account\n *\n */\nconst res = await api.init();\n/**\n * Get DID generated using currently selected MM account and currently selected DID method.\n * @returns {string} - did\n */\nconst did = await api.getDID();\n/**\n * Get currently selected DID Method\n *\n * @returns {string} - did method\n */\nconst method = await api.getMethod();\n/**\n * Get a list of supported DID methods\n *\n * @returns {Array<string>} - supported DID methods\n */\nconst methods = await api.getAvailableMethods();\n/**\n * Switch DID method to one of supported DID methods\n *\n * @param {string} - new DID method name\n */\nconst res = await api.switchMethod(didMethod);\n/**\n * Get currently selected VC Store plugin\n *\n * @returns {string} - name of VC Store plugin\n */\nconst vcStore = await api.getVCStore();\n/**\n * Get a list supported VC Store plugins\n *\n * @returns {Array<string>} - supported VC Store plugins\n */\nconst vcStores = await api.getAvailableVCStores();\n/**\n * Set VC Store plugin\n *\n * @param {string} - name of VC Store plugin\n */\nconst res = await api.setVCStore(vcStore);\n\n/**\n * Toggle popups - enable/disable \"Are you sure?\" confirmation windows when retrieving VCs and generating VPs,...\n *\n */\nconst res = await api.togglePopups();\n\n/**\n * Change infura token\n *\n * @param {string} infuraToken\n *\n */\nconst res = await api.changeInfuraToken(infuraToken);\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"NOTE: VCQuerry is an object that is a subset of VerifiableCredential. If provided, the function will only return VCs that match the VCQuerry subset. For example if you only want to retrieve VCs issued by a specific DID to a specific subject you would need to use ",(0,r.kt)("inlineCode",{parentName:"em"},"agent.listVCS({querry: {issuer: {id: 'did:ethr:0x...'}, credentialSubject: {id: 'did:ethr:0x...'}}})"))),(0,r.kt)("h4",{id:"utility-methods"},"Utility methods"),(0,r.kt)("p",null,"SSI Snap Connector also comes with additional utility methods such as ",(0,r.kt)("inlineCode",{parentName:"p"},"isSnapInstalled"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"isMetamaskSnapsSupported")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"hasMetamask"),"."))}d.isMDXComponent=!0},876:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var a=t(2784);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(t),m=r,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return t?a.createElement(f,o(o({ref:n},c),{},{components:t})):a.createElement(f,o({ref:n},c))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[d]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"}}]);